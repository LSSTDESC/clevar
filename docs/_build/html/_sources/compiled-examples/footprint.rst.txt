Footprint functionality
=======================

Here we show how to use the footprint functionality. It is not used
directly in the matching, but can be applied on the recovery rates
computation

.. raw:: html

   <h1>

Table of Contents

.. raw:: html

   </h1>

.. container:: toc

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   1  Generate random data and add to catalog

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   2  Add an external footprint

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   2.1  Plotting the footprint

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   3  Use ClEvaR functions to create a footprint

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   4  Footprint masks

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   5  Saving and loading footprint quantities

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   6  Match catalogs

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7  Recovery rate

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

.. code:: ipython3

    %load_ext autoreload
    %autoreload 2

.. code:: ipython3

    import numpy as np
    import pylab as plt
    import healpy as hp

Generate random data and add to catalog
---------------------------------------

.. code:: ipython3

    # For reproducibility
    np.random.seed(1)

.. code:: ipython3

    from support import gen_cluster
    input1, input2 = gen_cluster(ra_min=0, ra_max=30, dec_min=9, dec_max=30)


.. parsed-literal::

    Initial number of clusters (logM>12.48): 2,740
    Clusters in catalog1: 835
    Clusters in catalog2: 928


.. code:: ipython3

    from clevar import ClCatalog
    c1 = ClCatalog('Cat1', ra=input1['RA'], dec=input1['DEC'], z=input1['Z'], mass=input1['MASS'],
                mass_err=input1['MASS_ERR'], z_err=input1['Z_ERR'], radius=input1['RADIUS_ARCMIN'],
                radius_unit='arcmin')
    c2 = ClCatalog('Cat2', ra=input2['RA'], dec=input2['DEC'], z=input2['Z'], mass=input2['MASS'],
                mass_err=input2['MASS_ERR'], z_err=input2['Z_ERR'], radius=input2['RADIUS_ARCMIN'],
                radius_unit='arcmin')
    # Format for nice display
    for c in ('ra', 'dec', 'z', 'z_err', 'radius'):
        c1[c].info.format = '.2f'
        c2[c].info.format = '.2f'
    for c in ('mass', 'mass_err'):
        c1[c].info.format = '.2e'
        c2[c].info.format = '.2e'


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clevar-0.10.0-py3.9.egg/clevar/catalog.py:212: UserWarning: id column missing, additional one is being created.
      warnings.warn(


Add an external footprint
-------------------------

Here we will get heapy pixels based on the positions of the clusters

.. code:: ipython3

    nside = 32
    pixels1 = hp.ang2pix(nside, c1['ra'], c1['dec'], lonlat=True)
    pixels2 = hp.ang2pix(nside, c2['ra'], c2['dec'], lonlat=True)

Check to see if selected pixels are correct

.. code:: ipython3

    from matplotlib import cm
    import copy
    cmap = copy.copy(cm.jet)
    cmap.set_under('.1')
    gcol = lambda cmap, level: '#{:02x}{:02x}{:02x}{:02x}'.format(*cmap(level,bytes=True))
    
    # Map with pixels of each catalog
    map_ = np.zeros(hp.nside2npix(nside))
    map_[pixels1] += 1
    map_[pixels2] += 2
    map_[map_==0] = np.nan
    
    f = plt.figure(figsize=(10, 10))
    hp.cartview(map_, hold=True, latra=[5, 35], lonra=[-5, 40], cmap=cmap, cbar=False, flip='geo')
    ax = f.axes[0]
    ax.axis('on')
    ax.scatter(c1['ra'], c1['dec'], s=5, label='Cat 1 clusters')
    ax.scatter(c2['ra'], c2['dec'], s=5, label='Cat 2 clusters')
    
    ax.plot(0, 0, zorder=0, color=gcol(cmap, 0.0), label='Footptint - Cat1 only')
    ax.plot(0, 0, zorder=0, color=gcol(cmap, 0.5), label='Footptint - Cat2 only')
    ax.plot(0, 0, zorder=0, color=gcol(cmap, 1.0), label='Footptint - BOTH')
    ax.legend(loc=3)


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:202: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.
      aximg = self.imshow(




.. parsed-literal::

    <matplotlib.legend.Legend at 0x7fa0a539e460>




.. image:: footprint_files/footprint_11_2.png


Add them to the ``Footprint`` object. It also has an option of detection
fraction and :math:`z_{max}` information. If not provided, a default
value is set:

.. code:: ipython3

    from clevar.footprint import Footprint
    # Random values for detfrac and zmax for ftpt1
    detfrac_rand, z_rand = 0.9+.1*np.random.rand(len(set(pixels1))), 0.5+.5*np.random.rand(len(set(pixels1)))
    ftpt1 = Footprint(nside=nside, pixels=list(set(pixels1)),
                      detfrac=detfrac_rand, zmax=z_rand)
    ftpt2 = Footprint(nside=nside, pixels=list(set(pixels2)))

.. code:: ipython3

    f, axes = plt.subplots(1, 2)
    
    bins = np.linspace(0.85, 1.05, 41)
    axes[0].hist(ftpt1['detfrac'], bins=bins, label='ftpt1')
    axes[0].hist(ftpt2['detfrac'], bins=bins, histtype='step', label='ftpt2')
    axes[0].legend()
    axes[0].set_xlabel('detfrac')
    axes[0].set_yscale('log')
    
    bins = np.append(np.linspace(0.5, 1.0, 11), [99, 100])
    axes[1].hist(ftpt1['zmax'], bins=bins)
    axes[1].hist(ftpt2['zmax'], bins=bins, histtype='step')
    axes[1].set_xlabel('zmax')
    axes[1].set_xscale('log')
    axes[1].set_yscale('log')



.. image:: footprint_files/footprint_14_0.png


Plotting the footprint
~~~~~~~~~~~~~~~~~~~~~~

The footprints have an inbuilt function to plot their values

.. code:: ipython3

    f = ftpt1.plot('detfrac', bad_val=np.nan, auto_lim=True)
    f = ftpt1.plot('zmax', bad_val=np.nan, auto_lim=True)


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_over(newcm(1.0))
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_under(bgcolor)
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_bad(badcolor)
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:202: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.
      aximg = self.imshow(



.. image:: footprint_files/footprint_16_1.png



.. image:: footprint_files/footprint_16_2.png


Clusters can also be added to the plot with their actual angular size:

.. code:: ipython3

    f = ftpt1.plot('detfrac', bad_val=np.nan,
                   ra_lim=[3, 8], dec_lim=[10, 15],
                   cluster=c1)



.. image:: footprint_files/footprint_18_0.png


Use ClEvaR functions to create a footprint
------------------------------------------

Import ``create_footprint`` functions to create a footprint based on a
cluster catalog. It can create a footprint based on cluster positions
with a given ``NSIDE``, or compute the best ``NSIDE`` based on a cluster
density per pixel. It also can fill holes in the footprint.

.. code:: ipython3

    from clevar.footprint import create_artificial_footprint

Fixed ``NSIDE``:

.. code:: ipython3

    ftpt1 = create_artificial_footprint(c1['ra'], c1['dec'], nside=64)


.. parsed-literal::

    Footprint NSIDE: 64
    Pixels in footprint: 506
    Pixels in footprint: 506


``NSIDE`` from density:

.. code:: ipython3

    ftpt1 = create_artificial_footprint(c1['ra'], c1['dec'], nside=None, min_density=4)


.. parsed-literal::

    NSIDE(2) -> 208.75 clusters per pixel
    NSIDE(4) -> 139.16666666666666 clusters per pixel
    NSIDE(8) -> 46.388888888888886 clusters per pixel
    NSIDE(16) -> 14.910714285714286 clusters per pixel
    NSIDE(32) -> 4.417989417989418 clusters per pixel
    NSIDE(64) -> 1.650197628458498 clusters per pixel
    Footprint NSIDE: 64
    Pixels in footprint: 506
    Pixels in footprint: 506


fill holes

.. code:: ipython3

    ftpt1 = create_artificial_footprint(c1['ra'], c1['dec'], nside=64, neighbor_fill=5)


.. parsed-literal::

    Footprint NSIDE: 64
    Pixels in footprint: 506
    ### filling holes ###
     - filling
       size: 506 -> 673 (+167)
     - filling
       size: 673 -> 697 (+24)
     - filling
       size: 697 -> 699 (+2)
     - filling
       size: 699 -> 700 (+1)
     - filling
       size: 700 -> 700 (+0)
     Total Change:
       size: 506 -> 700 (+194)
    ### filled! ###
    Pixels in footprint: 700


.. code:: ipython3

    f = ftpt1.plot('detfrac', np.nan,  latra=[5, 35], lonra=[-5, 40])


.. parsed-literal::

    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:920: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_over(newcm(1.0))
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:921: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_under(bgcolor)
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:922: MatplotlibDeprecationWarning: You are modifying the state of a globally registered colormap. In future versions, you will not be able to modify a registered colormap in-place. To remove this warning, you can make a copy of the colormap first. cmap = copy.copy(mpl.cm.get_cmap("viridis"))
      newcm.set_bad(badcolor)
    /home/aguena/miniconda3/envs/clmmenv/lib/python3.9/site-packages/healpy/projaxes.py:202: MatplotlibDeprecationWarning: Passing parameters norm and vmin/vmax simultaneously is deprecated since 3.3 and will become an error two minor releases later. Please pass vmin/vmax directly to the norm when creating it.
      aximg = self.imshow(



.. image:: footprint_files/footprint_27_1.png


.. code:: ipython3

    ra, dec = hp.pix2ang(128, np.arange(hp.nside2npix(128)), lonlat=True)
    ra.min(), ra.max(), dec.min(), dec.max()




.. parsed-literal::

    (0.0, 359.6484375, -89.63451650477154, 89.63451650477154)



Footprint masks
---------------

Add masks to clusters regarding the footprint. The ``ClCatalog`` object
has has 3 functions related to the footprint: - ``add_ftpt_masks``: info
for cluster in footprint - ``add_ftpt_coverfrac``: computes cover
fraction - ``add_ftpt_coverfrac_nfw2D``: computes cover fraction
weighted by a project NFW profile

.. code:: ipython3

    %%time
    c1.add_ftpt_masks(ftpt1, ftpt2)
    c2.add_ftpt_masks(ftpt2, ftpt1)


.. parsed-literal::

    ## creating visibility mask ##
    ## creating visibility mask ##
    ## creating visibility mask ##
    ## creating visibility mask ##
    CPU times: user 10.8 ms, sys: 0 ns, total: 10.8 ms
    Wall time: 10.3 ms


.. code:: ipython3

    display(c1[:4])
    display(c2[:4])



.. raw:: html

    <b>Cat1</b><br></b><b>tags:</b> id(id), ra(ra), dec(dec), z(z), mass(mass), radius(radius)<br><b>Radius unit:</b> arcmin<br><i>ClData length=4</i>
    <table id="table140327937690640" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>ra</th><th>dec</th><th>z</th><th>mass</th><th>mass_err</th><th>z_err</th><th>radius</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>ft_self</th><th>ft_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>bool</th><th>bool</th></tr></thead>
    <tr><td>0</td><td>12.58</td><td>23.60</td><td>1.53</td><td>1.00e+13</td><td>3.69e+12</td><td>0.08</td><td>0.94</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>1</td><td>6.13</td><td>23.17</td><td>0.33</td><td>1.57e+13</td><td>4.29e+12</td><td>0.04</td><td>0.48</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>2</td><td>12.52</td><td>10.82</td><td>0.78</td><td>1.49e+13</td><td>6.11e+12</td><td>0.07</td><td>0.84</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>3</td><td>4.21</td><td>14.78</td><td>1.01</td><td>1.13e+13</td><td>4.71e+12</td><td>0.06</td><td>0.42</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    </table>



.. raw:: html

    <b>Cat2</b><br></b><b>tags:</b> id(id), ra(ra), dec(dec), z(z), mass(mass), radius(radius)<br><b>Radius unit:</b> arcmin<br><i>ClData length=4</i>
    <table id="table140327937690064" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>ra</th><th>dec</th><th>z</th><th>mass</th><th>mass_err</th><th>z_err</th><th>radius</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>ft_self</th><th>ft_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>bool</th><th>bool</th></tr></thead>
    <tr><td>0</td><td>12.58</td><td>23.60</td><td>1.51</td><td>1.12e+13</td><td>3.69e+12</td><td>0.08</td><td>0.94</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>1</td><td>6.13</td><td>23.17</td><td>0.33</td><td>2.35e+13</td><td>4.29e+12</td><td>0.04</td><td>0.48</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>2</td><td>12.52</td><td>10.82</td><td>0.80</td><td>1.36e+13</td><td>6.11e+12</td><td>0.07</td><td>0.84</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    <tr><td>3</td><td>4.21</td><td>14.78</td><td>0.99</td><td>1.71e+13</td><td>4.71e+12</td><td>0.06</td><td>0.42</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td></tr>
    </table>


Add coverfraction values based on the footprint. It needs a cosmology
object.

.. code:: ipython3

    from clevar.cosmology import AstroPyCosmology
    cosmo = AstroPyCosmology()

.. code:: ipython3

    %%time
    c1.add_ftpt_coverfrac(ftpt2, 1, 'mpc', cosmo=cosmo, window='flat')
    c1.add_ftpt_coverfrac(ftpt2, 1, 'mpc', cosmo=cosmo, window='nfw2D')
    c2.add_ftpt_coverfrac(ftpt1, 1, 'mpc', cosmo=cosmo, window='nfw2D')


.. parsed-literal::

    CPU times: user 6.37 s, sys: 4.91 ms, total: 6.37 s
    Wall time: 6.38 s


.. code:: ipython3

    display(c1[:4])
    display(c2[:4])



.. raw:: html

    <b>Cat1</b><br></b><b>tags:</b> id(id), ra(ra), dec(dec), z(z), mass(mass), radius(radius)<br><b>Radius unit:</b> arcmin<br><i>ClData length=4</i>
    <table id="table140327937588912" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>ra</th><th>dec</th><th>z</th><th>mass</th><th>mass_err</th><th>z_err</th><th>radius</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>ft_self</th><th>ft_other</th><th>cf_1_mpc</th><th>cf_nfw_1_mpc</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>bool</th><th>bool</th><th>float64</th><th>float64</th></tr></thead>
    <tr><td>0</td><td>12.58</td><td>23.60</td><td>1.53</td><td>1.00e+13</td><td>3.69e+12</td><td>0.08</td><td>0.94</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td><td>1.0</td></tr>
    <tr><td>1</td><td>6.13</td><td>23.17</td><td>0.33</td><td>1.57e+13</td><td>4.29e+12</td><td>0.04</td><td>0.48</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td><td>1.0</td></tr>
    <tr><td>2</td><td>12.52</td><td>10.82</td><td>0.78</td><td>1.49e+13</td><td>6.11e+12</td><td>0.07</td><td>0.84</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td><td>1.0</td></tr>
    <tr><td>3</td><td>4.21</td><td>14.78</td><td>1.01</td><td>1.13e+13</td><td>4.71e+12</td><td>0.06</td><td>0.42</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td><td>1.0</td></tr>
    </table>



.. raw:: html

    <b>Cat2</b><br></b><b>tags:</b> id(id), ra(ra), dec(dec), z(z), mass(mass), radius(radius)<br><b>Radius unit:</b> arcmin<br><i>ClData length=4</i>
    <table id="table140327937587856" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>ra</th><th>dec</th><th>z</th><th>mass</th><th>mass_err</th><th>z_err</th><th>radius</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>ft_self</th><th>ft_other</th><th>cf_nfw_1_mpc</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>bool</th><th>bool</th><th>float64</th></tr></thead>
    <tr><td>0</td><td>12.58</td><td>23.60</td><td>1.51</td><td>1.12e+13</td><td>3.69e+12</td><td>0.08</td><td>0.94</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td></tr>
    <tr><td>1</td><td>6.13</td><td>23.17</td><td>0.33</td><td>2.35e+13</td><td>4.29e+12</td><td>0.04</td><td>0.48</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td></tr>
    <tr><td>2</td><td>12.52</td><td>10.82</td><td>0.80</td><td>1.36e+13</td><td>6.11e+12</td><td>0.07</td><td>0.84</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td></tr>
    <tr><td>3</td><td>4.21</td><td>14.78</td><td>0.99</td><td>1.71e+13</td><td>4.71e+12</td><td>0.06</td><td>0.42</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>True</td><td>True</td><td>1.0</td></tr>
    </table>


Saving and loading footprint quantities
---------------------------------------

``ClEvaR`` has internal functions to save and load these quantities into
the catalog so you don’t have to compute them again:

.. code:: ipython3

    c1.save_footprint_quantities('cat1_ft_quantities.fits', overwrite=True)
    c1.load_footprint_quantities('cat1_ft_quantities.fits')

Match catalogs
--------------

.. code:: ipython3

    from clevar.match import ProximityMatch

.. code:: ipython3

    match_config = {
        'type': 'cross', # options are cross, cat1, cat2
        'which_radius': 'max', # Case of radius to be used, can be: cat1, cat2, min, max
        'preference': 'angular_proximity', # options are more_massive, angular_proximity or redshift_proximity
        'catalog1': {'delta_z':.2,
                    'match_radius': '1 mpc'},
        'catalog2': {'delta_z':.2,
                    'match_radius': '10 arcsec'}
    }

.. code:: ipython3

    %%time
    mt = ProximityMatch()
    mt.match_from_config(c1, c2, match_config, cosmo=cosmo)


.. parsed-literal::

    
    ## ClCatalog 1
    ## Prep mt_cols
    * zmin|zmax from config value
    * ang radius from set scale
    
    ## ClCatalog 2
    ## Prep mt_cols
    * zmin|zmax from config value
    * ang radius from set scale
    
    ## Multiple match (catalog 1)
    Finding candidates (Cat1)
    * 719/835 objects matched.
    
    ## Multiple match (catalog 2)
    Finding candidates (Cat2)
    * 721/928 objects matched.
    
    ## Finding unique matches of catalog 1
    Unique Matches (Cat1)
    * 719/835 objects matched.
    
    ## Finding unique matches of catalog 2
    Unique Matches (Cat2)
    * 720/928 objects matched.
    Cross Matches (Cat1)
    * 719/835 objects matched.
    Cross Matches (Cat2)
    * 719/928 objects matched.
    CPU times: user 13.3 s, sys: 219 ms, total: 13.5 s
    Wall time: 13.3 s


Recovery rate
-------------

Use pass the parameters ``mask`` (masks all clusters) or
``mask_unmatched`` (masks only unmatched clusters) to consider only
specific clusters on the recovery rate.

.. code:: ipython3

    from clevar.match_metrics import recovery

.. code:: ipython3

    zbins = np.linspace(0, 2, 11)
    mbins = np.logspace(13, 14, 5)

.. code:: ipython3

    f, axes = plt.subplots(1, 3, figsize=(15, 5))
    recovery.plot(c1, 'cross', zbins, mbins, ax=axes[0], add_legend=False)
    recovery.plot(c1, 'cross', zbins, mbins, ax=axes[1], add_legend=False,
                  mask=c1.data['cf_nfw_1_mpc']<1)
    recovery.plot(c1, 'cross', zbins, mbins, ax=axes[2],
                  mask_unmatched=c1.data['cf_nfw_1_mpc']<1)
    for ax in axes:
        ax.set_ylim(-.01, 1.05)
    axes[0].text(1, 1.1, 'no mask')
    axes[1].text(1, 1.1, 'mask all')
    axes[2].text(1, 1.1, 'mask unmatched')
    plt.show()



.. image:: footprint_files/footprint_45_0.png


You can check the exact numbers used on the 2D plots

.. code:: ipython3

    f, axes = plt.subplots(1, 3, figsize=(20, 5))
    
    recovery.plot2D(c1, 'cross', zbins, mbins, ax=axes[0],
                    add_num=True, num_kwargs={'fontsize':12
                                             })
    recovery.plot2D(c1, 'cross', zbins, mbins, ax=axes[1],
                    add_num=True, num_kwargs={'fontsize':12},
                   mask=c1.data['cf_nfw_1_mpc']<1)
    recovery.plot2D(c1, 'cross', zbins, mbins, ax=axes[2],
                    add_num=True, num_kwargs={'fontsize':12},
                   mask_unmatched=c1.data['cf_nfw_1_mpc']<1)
    axes[0].text(1, mbins[-1]*1.1,'no mask')
    axes[1].text(1, mbins[-1]*1.1,'mask all')
    axes[2].text(1, mbins[-1]*1.1,'mask unmatched')
        
    plt.show()



.. image:: footprint_files/footprint_47_0.png


