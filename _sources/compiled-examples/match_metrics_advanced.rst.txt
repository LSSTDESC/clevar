Metrics of matching (advanced)
==============================

Example of the more functions to plot metrics of matching, using
non-standard quantities of the catalogs

.. code:: ipython3

    %load_ext autoreload
    %autoreload 2

.. code:: ipython3

    import numpy as np
    import pylab as plt

Generate random data and add to catalog
---------------------------------------

.. code:: ipython3

    # For reproducibility
    np.random.seed(1)

.. code:: ipython3

    from support import gen_cluster
    input1, input2 = gen_cluster()

.. code:: ipython3

    from clevar import ClCatalog
    c1 = ClCatalog('Cat1', ra=input1['RA'], dec=input1['DEC'], z=input1['Z'], mass=input1['MASS'],
                mass_err=input1['MASS_ERR'], z_err=input1['Z_ERR'])
    c2 = ClCatalog('Cat2', ra=input2['RA'], dec=input2['DEC'], z=input2['Z'], mass=input2['MASS'],
                mass_err=input2['MASS_ERR'], z_err=input2['Z_ERR'])
    # Format for nice display
    for c in ('ra', 'dec', 'z', 'z_err'):
        c1[c].info.format = '.2f'
        c2[c].info.format = '.2f'
    for c in ('mass', 'mass_err'):
        c1[c].info.format = '.2e'
        c2[c].info.format = '.2e'

Match catalogs
--------------

.. code:: ipython3

    from clevar.match import ProximityMatch
    from clevar.cosmology import AstroPyCosmology
    
    match_config = {
        'type': 'cross', # options are cross, cat1, cat2
        'which_radius': 'max', # Case of radius to be used, can be: cat1, cat2, min, max
        'preference': 'angular_proximity', # options are more_massive, angular_proximity or redshift_proximity
        'catalog1': {'delta_z':.2,
                    'match_radius': '1 mpc'
                    },
        'catalog2': {'delta_z':.2,
                    'match_radius': '10 arcsec'
                    }
    }
    
    cosmo = AstroPyCosmology()
    mt = ProximityMatch()
    mt.match_from_config(c1, c2, match_config, cosmo=cosmo)


.. parsed-literal::

    
    ## ClCatalog 1
    ## Prep mt_cols
    * zmin|zmax from config value
    * ang radius from set scale
    
    ## ClCatalog 2
    ## Prep mt_cols
    * zmin|zmax from config value
    * ang radius from set scale
    
    ## Multiple match (catalog 1)
    Finding candidates (Cat1)
    * 400/700 objects matched.
    
    ## Multiple match (catalog 2)
    Finding candidates (Cat2)
    * 400/700 objects matched.
    
    ## Finding unique matches of catalog 1
    Unique Matches (Cat1)
    * 400/700 objects matched.
    
    ## Finding unique matches of catalog 2
    Unique Matches (Cat2)
    * 400/700 objects matched.


Recovery rate
-------------

Compute recovery rates, in the main functions they are computed in mass
and redshift bins. Here a more advanced use where different quantities
can be used. There are several ways they can be displayed: - Single
panel with multiple lines - Multiple panels - 2D color map

To use this, import the ``ClCatalogFuncs`` package from ``recovery``. It
contains the functions: - ``plot`` - ``plot_panel`` - ``plot2D``

There functions have the names of the columns as arguments, so you can
use different columns available in the catalogs.

.. code:: ipython3

    from clevar.match_metrics.recovery import ClCatalogFuncs as r_cf

.. code:: ipython3

    zbins = np.linspace(0, 2, 11)
    mbins = np.logspace(13, 14, 5)

Simple plot
~~~~~~~~~~~

The recovery rates are shown as a function of redshift in mass bins.
They can be displayed as a continuous line or with steps:

.. code:: ipython3

    ax = r_cf.plot(c1, col1='z', col2='mass', bins1=zbins, bins2=mbins,
            matching_type='cross', legend_format=lambda x: f'10^{{{np.log10(x)}}}')



.. image:: match_metrics_advanced_files/match_metrics_advanced_13_0.png


They can also be transposed to be shown as a function of mass in
redshift bins.

.. code:: ipython3

    f, axes = r_cf.plot_panel(c1, col1='z', col2='mass', bins1=zbins, bins2=mbins,
            matching_type='cross', label_format=lambda x: f'10^{{{np.log10(x)}}}')



.. image:: match_metrics_advanced_files/match_metrics_advanced_15_0.png


.. code:: ipython3

    f, axes = r_cf.plot2D(c1, col1='z', col2='mass', bins1=zbins, bins2=mbins,
            matching_type='cross', scale2='log')



.. image:: match_metrics_advanced_files/match_metrics_advanced_16_0.png


Distances of matching
---------------------

The main functions in ``distances`` can already be binned along other
quantities of the catalog and do not require a more advanced use.

Nonetheless it also has a ``ClCatalogFuncs`` package and can be used
with the same formalism:

.. code:: ipython3

    from clevar.match_metrics.distances import ClCatalogFuncs as d_cf

.. code:: ipython3

    ax = d_cf.central_position(c1, c2, 'cross', radial_bins=20, radial_bin_units='degrees',
                               col2='z', bins2=zbins[::4])



.. image:: match_metrics_advanced_files/match_metrics_advanced_19_0.png


.. code:: ipython3

    ax = d_cf.redshift(c1, c2, 'cross', redshift_bins=20,
                       col2='z', bins2=zbins[::4], normalize='cat1')



.. image:: match_metrics_advanced_files/match_metrics_advanced_20_0.png


Scaling Relations
-----------------

Here you will be able to evaluate the scaling relations of any two
quantities of the matched catalogs. Import the ``ClCatalogFuncs``
package from ``scaling``, the functions of this package are: - ``plot``:
Scaling relation of a quantity - ``plot_color``: Scaling relation of a
quantity with the colors based on a 2nd quantity - ``plot_density``:
Scaling relation of a quantity with the colors based on density of
points - ``plot_panel``: Scaling relation of a quantity divided in
panels based on a 2nd quantity - ``plot_color_panel``: Scaling relation
of a quantity with the colors based on a 2nd quantity in panels based on
a 3rd quantity - ``plot_density_panel``: Scaling relation of a quantity
with the colors based on density of points in panels based on a 2rd
quantity

take the name of the quantity to be binned:

.. code:: ipython3

    from clevar.match_metrics.scaling import ClCatalogFuncs as s_cf

.. code:: ipython3

    ax = s_cf.plot(c1, c2, 'cross', col='mass', xscale='log', yscale='log')



.. image:: match_metrics_advanced_files/match_metrics_advanced_23_0.png


.. code:: ipython3

    ax = s_cf.plot_color(c1, c2, 'cross', col='mass', xscale='log', yscale='log',
                         col_color='mass', color_log=True)



.. image:: match_metrics_advanced_files/match_metrics_advanced_24_0.png


.. code:: ipython3

    ax = s_cf.plot_density(c1, c2, 'cross', col='mass', xscale='log', yscale='log')



.. image:: match_metrics_advanced_files/match_metrics_advanced_25_0.png


.. code:: ipython3

    f, axes = s_cf.plot_panel(c1, c2, 'cross', col='mass', xscale='log', yscale='log',
                             col_panel='z', bins_panel=zbins[::2])



.. image:: match_metrics_advanced_files/match_metrics_advanced_26_0.png


.. code:: ipython3

    f, axes = s_cf.plot_color_panel(c1, c2, 'cross', col='mass', xscale='log', yscale='log',
                             col_panel='z', bins_panel=zbins[::2],
                             col_color='z')



.. image:: match_metrics_advanced_files/match_metrics_advanced_27_0.png


.. code:: ipython3

    f, axes = s_cf.plot_density_panel(c1, c2, 'cross', col='mass', xscale='log', yscale='log',
                             col_panel='z', bins_panel=zbins[::2])



.. image:: match_metrics_advanced_files/match_metrics_advanced_28_0.png


.. code:: ipython3

    f, axes = s_cf.plot_metrics(c1, c2, 'cross', col='z', label1='z1')



.. image:: match_metrics_advanced_files/match_metrics_advanced_29_0.png


.. code:: ipython3

    f, axes = s_cf.plot_density_metrics(c1, c2, 'cross', col='z')



.. image:: match_metrics_advanced_files/match_metrics_advanced_30_0.png


.. code:: ipython3

    f, axes = s_cf.plot_density_metrics(c1, c2, 'cross', col='mass', metrics_mode='log', 
                                       scale1='log', scale2='log')



.. image:: match_metrics_advanced_files/match_metrics_advanced_31_0.png

