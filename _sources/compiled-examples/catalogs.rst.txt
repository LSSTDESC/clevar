Galaxy Cluster Catalogs
=======================

The main object for galaxy cluster catalogs is ``ClCatalog``, it has
same properties of ``astropy`` tables, with additional functionality.

.. raw:: html

   <h1>

Table of Contents

.. raw:: html

   </h1>

.. container:: toc

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   1  ClCatalog attributes

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   2  Creating a catalog

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   2.1  From columns

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   2.2  From data table

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   2.3  Create a catalog from fits files

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   3  ClCatalog necessary columns

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   3.1  Important inputs of ClCatalog

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   3.2  Reserved keyword arguments

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   3.3  Catalog lables

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   3.4  Catalog mt_input

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   4  Saving catalogs

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   5  Accessing catalog data

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   6  Inbuilt function of catalogs

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7  Adding members to cluster catalogs

   .. raw:: html

      <ul class="toc-item">

   .. raw:: html

      <li>

   7.1  Read members from fits files

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7.2  Important inputs of members catalog

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7.3  Reserved keyword arguments

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7.4  Saving members

   .. raw:: html

      </li>

   .. raw:: html

      <li>

   7.5  Memory consuption

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

   .. raw:: html

      </li>

   .. raw:: html

      </ul>

.. code:: ipython3

    %load_ext autoreload
    %autoreload 2
    from IPython.display import HTML

ClCatalog attributes
--------------------

The ``ClCatalog`` has the following internal attributes: - ``name``:
ClCatalog name - ``data``: Table with main catalog data (ex: id, ra,
dec, z) and matching data (mt_self, mt_other, mt_cross, mt_multi_self,
mt_multi_other) - ``tags``: Dictionary that tells which are the default
columns to be used - ``mt_input``: Table containing the necessary inputs
for the match (added by Match objects) - ``size``: Number of objects in
the catalog - ``id_dict``: Dictionary of indicies given the object id -
``labels``: Labels of data columns for plots - ``members``: Members of
clusters (optional) - ``leftover_members``: Galaxies in the input
members not hosted by the cluster catalog (optional)

Creating a catalog
------------------

The catalog can be created by passing individual columns or a whole data
table. Below we show how each case can be used.

.. code:: ipython3

    from clevar import ClCatalog

From columns
~~~~~~~~~~~~

To create a catalog fom columns, you have to pass the name as the
initial argument and the data columns for the table as keyword
arguments:

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663669408" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



You can also pass a ``tags`` dictionary as input if you want your
catalog to have names that are not default for ``ClEvaR`` use:

.. code:: ipython3

    cat = ClCatalog('cluster', ID_CLUSTER=['c1', 'c2'], M200=[1e13, 1e14],
                    tags={'id':'ID_CLUSTER', 'mass':'M200'})
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663670656" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



Almost all keyword arguments will become columns of the catalog (see
exeptions in `Important inputs of ``ClCatalog`` <#clcat_input>`__):

.. code:: ipython3

    cat = ClCatalog('test name', id=['c1', 'c2'], test_column=[1, 2],
                    other=[True, False], third=[None, []])
    cat




.. raw:: html

    <b>test name</b><br></b><b>tags:</b> id(id)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663668880" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>test_column</th><th>other</th><th>third</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>int64</th><th>bool</th><th>object</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1</td><td>True</td><td>None</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>2</td><td>False</td><td>[]</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



From data table
~~~~~~~~~~~~~~~

You can also create a ``ClCatalog`` passing directly a full data table:

.. code:: ipython3

    from astropy.table import Table
    ap_table = Table([['c1', 'c2'],[1e13, 1e14]], names=['id', 'mass'])
    cat = ClCatalog('cluster', data=ap_table)
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140545829118832" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



You can also pass a tags dictionary as input if you want your catalog to
have names that are not default for ``ClEvaR`` use:

.. code:: ipython3

    from astropy.table import Table
    ap_table = Table([['c1', 'c2'],[1e13, 1e14]], names=['ID_CLUSTER', 'M200'])
    cat = ClCatalog('cluster', data=ap_table, tags={'id':'ID_CLUSTER', 'mass':'M200'})
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663320624" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



You can also pass a dictionary or a ``numpy`` array with names:

.. code:: ipython3

    cat = ClCatalog('cluster', data={'id':['c1', 'c2'], 'mass':[1e13, 1e14]})
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663323456" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. code:: ipython3

    import numpy as np
    np_table = np.array([('c1', 1e13),('c2', 1e14)],
                        dtype=[('id', 'U10'), ('mass', 'f4')])
    cat = ClCatalog('cluster', data=np_table)
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663668448" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str10</th><th>float32</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



Create a catalog from ``fits`` files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The catalogs objects can also be read directly from file, by passing the
fits file as the first argument, the catalog name as the second, and the
``tag`` argument listing the main columns to be read:

.. code:: ipython3

    cat = ClCatalog.read('../demo/cat1.fits', 'my cluster',
                         tags={'id':'ID', 'mass':'MASS'})
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>my cluster</b><br></b><b>tags:</b> ID(id), MASS(mass)<br><b>Radius unit:</b> None<br><i>ClData length=5</i>
    <table id="table140542663322592" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>MASS (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>CL0</td><td>3.16e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL1</td><td>2.51e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL2</td><td>2.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL3</td><td>6.31e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL4</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



If you want to read all columns in the ``.fits`` file, set the argument
``full=True``.

.. code:: ipython3

    cat = ClCatalog.read('../demo/cat1.fits', 'my cluster', full=True,
                         tags={'id':'ID', 'mass':'MASS'})
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>my cluster</b><br></b><b>tags:</b> ID(id), MASS(mass), RA(ra), DEC(dec), Z(z)<br><b>Radius unit:</b> None<br><i>ClData length=5</i>
    <table id="table140542663319760" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>RA (ra)</th><th>DEC (dec)</th><th>Z (z)</th><th>MASS (mass)</th><th>RADIUS_ARCMIN</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>CL0</td><td>0.0</td><td>0.0</td><td>0.2</td><td>3.16e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL1</td><td>0.0001</td><td>0.0</td><td>0.3</td><td>2.51e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL2</td><td>0.00011</td><td>0.0</td><td>0.25</td><td>2.00e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL3</td><td>25.0</td><td>0.0</td><td>0.4</td><td>6.31e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL4</td><td>20.0</td><td>0.0</td><td>0.35</td><td>1.00e+14</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



ClCatalog necessary columns
---------------------------

There are a few columns that will aways be present on ``ClCatalog``
objects, and are added when not provided. For instance, the matching
columns (with prefix ``mt_``):

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140545829174096" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



All catalogs have an ``id`` column. If it is not included in the input,
one will be created:

.. code:: ipython3

    cat = ClCatalog('cluster', mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clevar-0.10.3-py3.9.egg/clevar/catalog.py:212: UserWarning: id column missing, additional one is being created.
      warnings.warn(




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140545829074592" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str1</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>0</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>1</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



Important inputs of ``ClCatalog``\ 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

As shown above, ``ClCatalog`` can have any column in its main data
table. There are a few key columns that must exist (or be tagged) to be
used for matching:

-  ``id`` - necessary in membership matching (must correspond to
   ``id_cluster`` in the cluster member catalog).
-  ``ra`` (in degrees) - necessary for proxity matching.
-  ``dec`` (in degrees) - necessary for proxity matching.
-  ``z`` - necessary for proxity matching if used as matching criteria
   (or for angular to physical convertion).
-  ``mass`` (or mass proxy) - necessary for proxity matching if
   ``shared_member_fraction`` used as preference criteria for unique
   matches (default use in membership matching).
-  ``radius`` - necessary for proxity matching if used as a criteria of
   matching (also requires ``radius_unit`` to be passed)

Reserved keyword arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~

There is some keyword arguments that have a fixed meaning and do not
become columns in the cluster data table:

-  ``radius_unit``: can be in angular units (``radians``, ``degrees``,
   ``arcmin``, ``arcsec``) or physical units (``Mpc``, ``kpc``, ``pc``)
   or can enven be given by mass overdensity units (``m200b``,
   ``m500c``) and are case insensitive. In the proximity matching the
   radius is converted to angular distances (degrees).
-  ``data``: Data table to be added to the catalog.
-  ``tags``: Dictionary that tags the important columns in the catalog.
-  ``labels``: Dictionary with labels of data columns to be used in
   plots.
-  ``members``: Members of clusters, see `cluster members <#memcat>`__
   section for details.
-  ``members_warning``: Warn if the members catalog contains galaxies
   not hosted by the cluster catalog.
-  ``mt_input``: Table containing the necessary inputs for the match.
   This attribute is usually added during the matching process, but it
   can be passed in the ``ClCatalog`` construction.

Catalog lables
~~~~~~~~~~~~~~

The catalogs have a ``label`` attribute that is used for plots. If it is
not provided as argument, a default value is assigned:

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat.labels




.. parsed-literal::

    {'id': 'id_{cluster}', 'mass': 'mass_{cluster}'}



.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14],
                    labels={'id':'cluster ID', 'mass':'cluster M_200'})
    cat.labels




.. parsed-literal::

    {'id': 'cluster ID', 'mass': 'cluster M_200'}



Catalog mt_input
~~~~~~~~~~~~~~~~

Here are some examples of information being added to ``mt_input`` after
the catalog creation. In the proximity matching, it will add an angular
distance and min/max redshift when ``delta_z`` is not ``None``:

.. code:: ipython3

    from clevar.match import ProximityMatch
    mt = ProximityMatch()

.. code:: ipython3

    cat = ClCatalog('Cat',id=['c1', 'c2'],  radius=[0.01, 0.02], radius_unit='radians')
    mt.prep_cat_for_match(cat, delta_z=None, match_radius='cat')
    cat.mt_input['ang']


.. parsed-literal::

    ## Prep mt_cols
    * zmin|zmax set to -1|10
    * ang radius from cat




.. raw:: html

    &lt;Column name=&apos;ang&apos; dtype=&apos;float64&apos; length=2&gt;
    <table>
    <tr><td>0.5729577951308232</td></tr>
    <tr><td>1.1459155902616465</td></tr>
    </table>



This information is also show directly when displaing the catalog:

.. code:: ipython3

    cat = ClCatalog('Cat',id=['c1', 'c2'],  radius=[0.01, 0.02], radius_unit='degrees')
    mt.prep_cat_for_match(cat, delta_z=None, match_radius='cat')
    cat


.. parsed-literal::

    ## Prep mt_cols
    * zmin|zmax set to -1|10
    * ang radius from cat




.. raw:: html

    <b>Cat</b><br></b><b>tags:</b> id(id), radius(radius)<br><b>Radius unit:</b> degrees<br><i>ClData length=2</i>
    <table id="table140542663668688" class="table-striped table-bordered table-condensed">
    <thead><tr><th colspan=6></th><th colspan=3 style='text-align:left; background-color:grey; color:white'>mt_input</th></tr></thread><thead><tr><th>id</th><th>radius</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>zmin</th><th>zmax</th><th>ang</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>
    <tr><td>c1</td><td>0.01</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.01</td></tr>
    <tr><td>c2</td><td>0.02</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.02</td></tr>
    </table>



Using physical units (requires a cosmology):

.. code:: ipython3

    from clevar.cosmology import AstroPyCosmology
    cosmo = AstroPyCosmology()
    
    display(HTML('<h3>Radius in Mpc</h3>'))
    cat = ClCatalog('Cat',id=['c1', 'c2'],  radius=[1, 1.5], z=[.4, .5], radius_unit='mpc')
    mt.prep_cat_for_match(cat, delta_z=None, match_radius='cat', cosmo=cosmo)
    display(cat)
    
    display(HTML('<h3>Radius from M200c</h3>'))
    cat = ClCatalog('Cat', id=['c1', 'c2'], mass=[1e13, 1e14], z=[.4, .5],
                    tags={'radius':'mass'}, radius_unit='m200c')
    mt.prep_cat_for_match(cat, delta_z=None, match_radius='cat', cosmo=cosmo)
    cat['mass'].info.format = '.2e' # Format for nice display
    display(cat)



.. raw:: html

    <h3>Radius in Mpc</h3>


.. parsed-literal::

    ## Prep mt_cols
    * zmin|zmax set to -1|10
    * ang radius from cat



.. raw:: html

    <b>Cat</b><br></b><b>tags:</b> id(id), radius(radius), z(z)<br><b>Radius unit:</b> mpc<br><i>ClData length=2</i>
    <table id="table140542663320720" class="table-striped table-bordered table-condensed">
    <thead><tr><th colspan=7></th><th colspan=3 style='text-align:left; background-color:grey; color:white'>mt_input</th></tr></thread><thead><tr><th>id</th><th>radius</th><th>z</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>zmin</th><th>zmax</th><th>ang</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>
    <tr><td>c1</td><td>1.0</td><td>0.4</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.05169945411341919</td></tr>
    <tr><td>c2</td><td>1.5</td><td>0.5</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.06825890628285289</td></tr>
    </table>



.. raw:: html

    <h3>Radius from M200c</h3>


.. parsed-literal::

    ## Prep mt_cols
    * zmin|zmax set to -1|10
    * ang radius from cat
        * Converting mass (m200c) ->radius



.. raw:: html

    <b>Cat</b><br></b><b>tags:</b> id(id), mass(radius), mass(mass), z(z)<br><b>Radius unit:</b> m200c<br><i>ClData length=2</i>
    <table id="table140542663322496" class="table-striped table-bordered table-condensed">
    <thead><tr><th colspan=7></th><th colspan=3 style='text-align:left; background-color:grey; color:white'>mt_input</th></tr></thread><thead><tr><th>id</th><th>mass (radius)</th><th>z</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th><th>zmin</th><th>zmax</th><th>ang</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th><th>float64</th><th>float64</th><th>float64</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>0.4</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.01996895400735947</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>0.5</td><td>None</td><td>None</td><td>[]</td><td>[]</td><td>-1.0</td><td>10.0</td><td>0.036417730336072186</td></tr>
    </table>


Saving catalogs
---------------

The ``ClCatalog`` object has a ``write`` inbuilt function to save them
to ``.fits`` files. This function also take the argument ``add_header``
that add the name and labels informations to those files. If the file
was saved with this argument, it can be read without the requirement of
a ``name`` argument:

.. code:: ipython3

    cat = ClCatalog('cluster', ID_CLUSTER=['c1', 'c2'], M200=[1e13, 1e14],
                    tags={'id':'ID_CLUSTER', 'mass':'M200'},
                    labels={'id':'cluster ID', 'mass':'cluster M_200'},
                   )
    cat.write('cat1_with_info.fits', overwrite=True)

.. code:: ipython3

    cat_temp = cat.read_full('cat1_with_info.fits')
    cat_temp['mass'].info.format = '.2e' # Format for nice display
    cat_temp




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663320288" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



Accessing catalog data
----------------------

The main data table of the catalog can be accessed with ``[]``
operations in the same way as ``astropy`` tables. The output is a new
``ClCatalog`` object, exept when only 1 row or column is required, then
the row/column is returned:

.. code:: ipython3

    cat = ClCatalog('cluster', ID_CLUSTER=['c1', 'c2'], M200=[1e13, 1e14],
                    tags={'id':'ID_CLUSTER', 'mass':'M200'},
                    labels={'id':'cluster ID', 'mass':'cluster M_200'},
                   )
    cat['mass'].info.format = '.2e' # Format for nice display

.. code:: ipython3

    cat['ID_CLUSTER']




.. raw:: html

    &lt;Column name=&apos;ID_CLUSTER&apos; dtype=&apos;str2&apos; length=2&gt;
    <table>
    <tr><td>c1</td></tr>
    <tr><td>c2</td></tr>
    </table>



.. code:: ipython3

    cat['ID_CLUSTER', 'M200']




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663669792" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. code:: ipython3

    cat[[1, 0]]




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663321680" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. code:: ipython3

    cat[[True, False]]




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=1</i>
    <table id="table140542663320768" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. code:: ipython3

    cat[:1]




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=1</i>
    <table id="table140542663321104" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. code:: ipython3

    cat[0]




.. raw:: html

    <i>Row index=0</i>
    <table id="table140542663670896">
    <thead><tr><th>ID_CLUSTER</th><th>M200</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



An important detail is that when the catalog has tags, passing a string
that is tagged will return the tagged column:

.. code:: ipython3

    cat['id']




.. raw:: html

    &lt;Column name=&apos;ID_CLUSTER&apos; dtype=&apos;str2&apos; length=2&gt;
    <table>
    <tr><td>c1</td></tr>
    <tr><td>c2</td></tr>
    </table>



.. code:: ipython3

    cat['id_cluster', 'M200']




.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> ID_CLUSTER(id), M200(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663320336" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID_CLUSTER (id)</th><th>M200 (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



Inbuilt function of catalogs
----------------------------

The ``ClCatalog`` object has some inbuilt functionality to facilitate
the matching. ``ids2inds`` returns the indicies of objects given an id
list. Other functions are related to footprint computations, see
footprint.ipynb for information on those.

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    
    display(HTML('<h3>Catalog</h3>'))
    display(cat)
    
    display(HTML('<h3>Catalog sorted by id list</h3>'))
    inds = cat.ids2inds(['c2', 'c1'])
    display(cat[inds])



.. raw:: html

    <h3>Catalog</h3>



.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663260720" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <h3>Catalog sorted by id list</h3>



.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663259376" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>


Adding members to cluster catalogs
----------------------------------

The members are used as an internal table like object of ``ClCatalog``,
accessed by ``.members``. This object have the following attributes: -
``name``: ClCatalog name - ``data``: Table with main catalog data (ex:
id, id_cluster, ra, dec, z) - ``size``: Number of objects in the catalog
- ``id_dict``: Dictionary of indicies given the object id - ``labels``:
Labels of data columns for plots - ``id_dict_list``: Dictionary of
indicies given the object id, retiruning lists to account members with
repeated ``id``.

The members can be added to the cluster object using the ``add_members``
function. It has a similar instanciating format of a ``ClCatalog``
object, where the columns are added by keyword arguments (the key
``id_cluster`` is always necessary and must correspond to ``id`` in the
main cluster catalog):

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat.add_members(id=['m1', 'm2', 'm3'], id_cluster=['c1', 'c2', 'c1'])
    display(cat)
    display(cat.members)



.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542663258608" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <b>members</b><br></b><b>tags:</b> id(id), id_cluster(id_cluster)<br><i>ClData length=3</i>
    <table id="table140542663261296" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>id_cluster</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str2</th><th>str2</th><th>int64</th></tr></thead>
    <tr><td>m1</td><td>c1</td><td>0</td></tr>
    <tr><td>m2</td><td>c2</td><td>1</td></tr>
    <tr><td>m3</td><td>c1</td><td>0</td></tr>
    </table>


The same can be done using ``tags``:

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1', 'c2'], mass=[1e13, 1e14])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat.add_members(
        ID=['m1', 'm2', 'm3'], IDCL=['c1', 'c2', 'c1'],
        tags={'id':'ID', 'id_cluster':'IDCL'})
    display(cat)
    display(cat.members)



.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=2</i>
    <table id="table140542662771472" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>c2</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <b>members</b><br></b><b>tags:</b> ID(id), IDCL(id_cluster)<br><i>ClData length=3</i>
    <table id="table140545829171840" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>IDCL (id_cluster)</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str2</th><th>str2</th><th>int64</th></tr></thead>
    <tr><td>m1</td><td>c1</td><td>0</td></tr>
    <tr><td>m2</td><td>c2</td><td>1</td></tr>
    <tr><td>m3</td><td>c1</td><td>0</td></tr>
    </table>


Read members from ``fits`` files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The catalogs objects can also be read directly from file, by passing the
fits file as the first argument, the catalog name as the second, and the
names of the columns in the fits files as keyword arguments:

.. code:: ipython3

    cat = ClCatalog.read(
        '../demo/cat1.fits', 'my cluster',
        tags={'id':'ID', 'mass':'MASS'})
    cat.read_members(
        '../demo/cat1_mem.fits',
        tags={'id':'ID', 'id_cluster':'ID_CLUSTER'})
    cat['mass'].info.format = '.2e' # Format for nice display
    display(cat)
    display(cat.members)



.. raw:: html

    <b>my cluster</b><br></b><b>tags:</b> ID(id), MASS(mass)<br><b>Radius unit:</b> None<br><i>ClData length=5</i>
    <table id="table140542663321296" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>MASS (mass)</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>CL0</td><td>3.16e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL1</td><td>2.51e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL2</td><td>2.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL3</td><td>6.31e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL4</td><td>1.00e+14</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <b>members</b><br></b><b>tags:</b> ID(id), ID_CLUSTER(id_cluster)<br><i>ClData length=15</i>
    <table id="table140542663322736" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>ID_CLUSTER (id_cluster)</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str5</th><th>str3</th><th>int64</th></tr></thead>
    <tr><td>MEM0</td><td>CL0</td><td>0</td></tr>
    <tr><td>MEM1</td><td>CL0</td><td>0</td></tr>
    <tr><td>MEM2</td><td>CL0</td><td>0</td></tr>
    <tr><td>MEM3</td><td>CL0</td><td>0</td></tr>
    <tr><td>MEM4</td><td>CL0</td><td>0</td></tr>
    <tr><td>MEM5</td><td>CL1</td><td>1</td></tr>
    <tr><td>MEM6</td><td>CL1</td><td>1</td></tr>
    <tr><td>MEM7</td><td>CL1</td><td>1</td></tr>
    <tr><td>MEM8</td><td>CL1</td><td>1</td></tr>
    <tr><td>MEM9</td><td>CL2</td><td>2</td></tr>
    <tr><td>MEM10</td><td>CL2</td><td>2</td></tr>
    <tr><td>MEM11</td><td>CL2</td><td>2</td></tr>
    <tr><td>MEM12</td><td>CL3</td><td>3</td></tr>
    <tr><td>MEM13</td><td>CL3</td><td>3</td></tr>
    <tr><td>MEM14</td><td>CL4</td><td>4</td></tr>
    </table>


Again, passing ``full=True`` will read all columns in the file:

.. code:: ipython3

    cat = ClCatalog.read(
        '../demo/cat1.fits', 'my cluster',
        tags={'id':'ID', 'mass':'MASS'}, full=True)
    cat.read_members(
        '../demo/cat1_mem.fits',
        tags={'id':'ID', 'id_cluster':'ID_CLUSTER'}, full=True)
    cat['mass'].info.format = '.2e' # Format for nice display
    display(cat)
    display(cat.members)



.. raw:: html

    <b>my cluster</b><br></b><b>tags:</b> ID(id), MASS(mass), RA(ra), DEC(dec), Z(z)<br><b>Radius unit:</b> None<br><i>ClData length=5</i>
    <table id="table140542662770848" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>RA (ra)</th><th>DEC (dec)</th><th>Z (z)</th><th>MASS (mass)</th><th>RADIUS_ARCMIN</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>CL0</td><td>0.0</td><td>0.0</td><td>0.2</td><td>3.16e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL1</td><td>0.0001</td><td>0.0</td><td>0.3</td><td>2.51e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL2</td><td>0.00011</td><td>0.0</td><td>0.25</td><td>2.00e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL3</td><td>25.0</td><td>0.0</td><td>0.4</td><td>6.31e+13</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    <tr><td>CL4</td><td>20.0</td><td>0.0</td><td>0.35</td><td>1.00e+14</td><td>1.0</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <b>members</b><br></b><b>tags:</b> ID(id), ID_CLUSTER(id_cluster), RA(ra), DEC(dec), Z(z)<br><i>ClData length=15</i>
    <table id="table140542662772288" class="table-striped table-bordered table-condensed">
    <thead><tr><th>ID (id)</th><th>ID_CLUSTER (id_cluster)</th><th>RA (ra)</th><th>DEC (dec)</th><th>Z (z)</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str5</th><th>str3</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th></tr></thead>
    <tr><td>MEM0</td><td>CL0</td><td>0.0</td><td>0.0</td><td>0.2</td><td>0</td></tr>
    <tr><td>MEM1</td><td>CL0</td><td>1e-05</td><td>1e-05</td><td>0.2</td><td>0</td></tr>
    <tr><td>MEM2</td><td>CL0</td><td>2e-05</td><td>2e-05</td><td>0.2</td><td>0</td></tr>
    <tr><td>MEM3</td><td>CL0</td><td>3.0000000000000004e-05</td><td>3.0000000000000004e-05</td><td>0.2</td><td>0</td></tr>
    <tr><td>MEM4</td><td>CL0</td><td>4e-05</td><td>4e-05</td><td>0.2</td><td>0</td></tr>
    <tr><td>MEM5</td><td>CL1</td><td>0.0001</td><td>0.0</td><td>0.3</td><td>1</td></tr>
    <tr><td>MEM6</td><td>CL1</td><td>0.00011</td><td>1e-05</td><td>0.3</td><td>1</td></tr>
    <tr><td>MEM7</td><td>CL1</td><td>0.00012</td><td>2e-05</td><td>0.3</td><td>1</td></tr>
    <tr><td>MEM8</td><td>CL1</td><td>0.00013000000000000002</td><td>3.0000000000000004e-05</td><td>0.3</td><td>1</td></tr>
    <tr><td>MEM9</td><td>CL2</td><td>0.00011</td><td>0.0</td><td>0.25</td><td>2</td></tr>
    <tr><td>MEM10</td><td>CL2</td><td>0.00012</td><td>1e-05</td><td>0.25</td><td>2</td></tr>
    <tr><td>MEM11</td><td>CL2</td><td>0.00013000000000000002</td><td>2e-05</td><td>0.25</td><td>2</td></tr>
    <tr><td>MEM12</td><td>CL3</td><td>25.0</td><td>0.0</td><td>0.4</td><td>3</td></tr>
    <tr><td>MEM13</td><td>CL3</td><td>25.00001</td><td>1e-05</td><td>0.4</td><td>3</td></tr>
    <tr><td>MEM14</td><td>CL4</td><td>20.0</td><td>0.0</td><td>0.35</td><td>4</td></tr>
    </table>


Important inputs of members catalog
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

There are a few key columns these catalogs must have to be used for
matching:

-  ``id`` - necessary in membership matching of members.
-  ``id_cluster`` - always necessary and must correspond to ``id`` in
   the main cluster catalog.
-  ``ra`` (in degrees) - necessary for proxity matching of members.
-  ``dec`` (in degrees) - necessary for proxity matching of members.
-  ``pmem`` - Probability of the galaxy being a member, must be [0, 1].
   If not provided, it will assing 1 for all members.

Reserved keyword arguments
~~~~~~~~~~~~~~~~~~~~~~~~~~

There are three keyword arguments with specific uses:

-  ``data``: Data table to be added to the catalog.
-  ``tags``: Dictionary that tags the important columns in the catalog.
-  ``labels``: Dictionary with labels of data columns to be used in
   plots.
-  ``members_consistency``: Require that all input members belong to
   this cluster catalog.
-  ``members_warning``: Raise warning if members are do not belong to
   this cluster catalog, and save them in leftover_members attribute.
-  ``members_catalog``: Members catalog if avaliable, mostly for
   internal use.

When ``members_consistency=True``, only galaxies hosted by the cluster
catalog is kept. If ``members_warning=True``, a warning is raised and
the clusters not hosted are stored in ``leftover_members``:

.. code:: ipython3

    cat = ClCatalog('cluster', id=['c1'], mass=[1e13])
    cat['mass'].info.format = '.2e' # Format for nice display
    cat.add_members(id=['m1', 'm2', 'm3'], id_cluster=['c1', 'c2', 'c1'])
    display(cat)
    display(cat.members)
    display(cat.leftover_members)


.. parsed-literal::

    /home/aguena/.local/lib/python3.9/site-packages/clevar-0.10.3-py3.9.egg/clevar/catalog.py:711: UserWarning: Some galaxies were not members of the cluster catalog. They are stored in leftover_members attribute.
      warnings.warn(



.. raw:: html

    <b>cluster</b><br></b><b>tags:</b> id(id), mass(mass)<br><b>Radius unit:</b> None<br><i>ClData length=1</i>
    <table id="table140542662800144" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>mass</th><th>mt_self</th><th>mt_other</th><th>mt_multi_self</th><th>mt_multi_other</th></tr></thead>
    <thead><tr><th>str2</th><th>float64</th><th>object</th><th>object</th><th>object</th><th>object</th></tr></thead>
    <tr><td>c1</td><td>1.00e+13</td><td>None</td><td>None</td><td>[]</td><td>[]</td></tr>
    </table>



.. raw:: html

    <b>members</b><br></b><b>tags:</b> id(id), id_cluster(id_cluster)<br><i>ClData length=2</i>
    <table id="table140542663259616" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>id_cluster</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str2</th><th>str2</th><th>int64</th></tr></thead>
    <tr><td>m1</td><td>c1</td><td>0</td></tr>
    <tr><td>m3</td><td>c1</td><td>0</td></tr>
    </table>



.. raw:: html

    <b>leftover members</b><br></b><b>tags:</b> id(id), id_cluster(id_cluster)<br><i>ClData length=1</i>
    <table id="table140542662800912" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>id_cluster</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str2</th><th>str2</th><th>int64</th></tr></thead>
    <tr><td>m2</td><td>c2</td><td>-1</td></tr>
    </table>


Saving members
~~~~~~~~~~~~~~

The ``member`` object has a ``write`` inbuilt function to save them to
``.fits`` files. This function also take the argument ``add_header``
that add the name and labels informations to those files. If the file
was saved with this argument, it can be read without the requirement of
a ``name`` argument:

.. code:: ipython3

    cat.members.write('mem1_with_info.fits', overwrite=True)

Memory consuption
~~~~~~~~~~~~~~~~~

IMPORTANT! The member catalogs are usually hundreds of times larger than
the cluster catalogs. Therefore it is advised not to add it unless you
are using it for a specific goal (ex: membership matching). This catalog
also can lead to memory overload and makes the other functions slower.

There are two options to handle this, you can either pass a member free
version of the catalog or remove the members altogether. To use the
member free version of the catalog, use the ``raw`` function:

.. code:: ipython3

    cat_raw = cat.raw()
    print("Original:")
    display(cat.members)
    print("Raw:")
    display(cat.raw().members)


.. parsed-literal::

    Original:



.. raw:: html

    <b>members</b><br></b><b>tags:</b> id(id), id_cluster(id_cluster)<br><i>ClData length=2</i>
    <table id="table140542662771376" class="table-striped table-bordered table-condensed">
    <thead><tr><th>id</th><th>id_cluster</th><th>ind_cl</th></tr></thead>
    <thead><tr><th>str2</th><th>str2</th><th>int64</th></tr></thead>
    <tr><td>m1</td><td>c1</td><td>0</td></tr>
    <tr><td>m3</td><td>c1</td><td>0</td></tr>
    </table>


.. parsed-literal::

    Raw:



.. parsed-literal::

    None


To remove the members from the cluster catalog, use the
``remove_members`` function:

.. code:: ipython3

    cat.remove_members()
    print(cat.members, cat.leftover_members)


.. parsed-literal::

    None None


