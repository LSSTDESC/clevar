#!/usr/bin/env python
import os
import warnings

import clevar

import yaml_funcs
if __name__=='__main__': 
    # Create clevar objects from yml config
    config = yaml_funcs.loadconf(consistency_configs=['catalog1', 'catalog2','proximity_match'])
    print("\n# Reading Catalog 1")
    c1 = yaml_funcs.make_catalog(config['catalog1'])
    print("\n# Reading Catalog 2")
    c2 = yaml_funcs.make_catalog(config['catalog2'])
    print("\n# Creating Cosmology")
    cosmo = yaml_funcs.make_cosmology(config['cosmology'])
    # Run matching
    mt = clevar.match.ProximityMatch()
    for match_step in sorted([c for c in config.keys()
                            if 'proximity_match' in c]):
        prt_msg = '# Start matching' if match_step=='proximity_match'\
            else f'# Run step {match_step.replace("proximity_match_", "")}'
        print(f'\n{"#"*20}\n{prt_msg}\n{"#"*20}')
        cosmo_ = yaml_funcs.make_cosmology(config[match_step]['cosmology']) \
                    if 'cosmology' in config[match_step] else cosmo
        if cosmo_!=cosmo:
            warn_msg = ('replacing default cosmology in matching with:\n    '+
                    '\n    '.join([f'{k}: {v}' for k, v in config[match_step]['cosmology'].items()]))
            warnings.warn(warn_msg)
        mt.match_from_config(c1, c2, config[match_step], cosmo=cosmo_)
    out1, out2 = f'{config["outpath"]}/match1.fits', f'{config["outpath"]}/match2.fits'
    check_actions = {'o': (lambda : None, [], {}), 'q': (exit, [], {}),}
    if os.path.isfile(out1):
        print(f"\n*** File '{out1}' already exist! ***")
        yaml_funcs.get_input_loop('Overwrite(o) and proceed or Quit(q)?', check_actions)
    if os.path.isfile(out2):
        print(f"\n*** File '{out2}' already exist! ***")
        yaml_funcs.get_input_loop('Overwrite(o) and proceed or Quit(q)?', check_actions)
    mt.save_matches(c1, c2, out_dir=config['outpath'], overwrite=True)
