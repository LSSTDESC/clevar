#!/usr/bin/env python
import clevar
import yaml_funcs
import warnings
def do_match(mt, match_config, cosmo=None):
    if 'cosmology' in match_config:
        cosmo_ = yaml_funcs.make_cosmology(match_config['cosmology'])
        if cosmo is not None  and cosmo_!=cosmo:
            warn_msg = ('replacing default cosmology in matching with:\n    '+
                    '\n    '.join([f'{k}: {v}' for k, v in match_config['cosmology'].items()]))
            warnings.warn(warn_msg)
    else:
        cosmo_ = cosmo

    if match_config['type'] in ('cat1', 'cross'):
        print("\n## Catalog 1")
        mt.prep_cat_for_match(c1, cosmo=cosmo_, **match_config['catalog1'])
    if match_config['type'] in ('cat2', 'cross'):
        print("\n## Catalog 2")
        mt.prep_cat_for_match(c2, cosmo=cosmo_, **match_config['catalog2'])

    if match_config['type'] in ('cat1', 'cross'):
        print("\n## Multiple match (catalog 1)")
        if match_config['which_radius'] == 'cat1':
            radius_selection = 'self'
        elif match_config['which_radius'] == 'cat2':
            radius_selection = 'other'
        else:
            radius_selection = match_config['which_radius']
        mt.multiple(c1, c2, radius_selection)
    if match_config['type'] in ('cat2', 'cross'):
        print("\n## Multiple match (catalog 2)")
        if match_config['which_radius'] == 'cat1':
            radius_selection = 'other'
        elif match_config['which_radius'] == 'cat2':
            radius_selection = 'self'
        else:
            radius_selection = match_config['which_radius']
        mt.multiple(c2, c1, radius_selection)

    if match_config['type'] in ('cat1', 'cross'):
        print("\n## Finding unique matches of catalog 1")
        mt.unique(c1, c2, match_config['preference'])
    if match_config['type'] in ('cat2', 'cross'):
        print("\n## Finding unique matches of catalog 2")
        mt.unique(c2, c1, match_config['preference'])
    return
if __name__=='__main__': 
    config = yaml_funcs.loadconf(consistency_configs=['catalog1', 'catalog2','proximity_match'])
    print("\n# Reading Catalog 1")
    c1 = yaml_funcs.make_catalog(config['catalog1'])
    print("\n# Reading Catalog 2")
    c2 = yaml_funcs.make_catalog(config['catalog2'])
    cosmo = yaml_funcs.make_cosmology(config['cosmology'])

    mt = clevar.match.ProximityMatch()

    for match_step in sorted([c for c in config.keys()
                            if 'proximity_match' in c]):
        print('\n'+'#'*20)
        if match_step=='proximity_match':
            print(f'# Start matching')
        else:
            print(f'# Run step {match_step.replace("proximity_match_", "")}')
        print('#'*20+'\n')
        do_match(mt, config[match_step], cosmo=cosmo)

    mt.save_matches(c1, c2, out_dir=config['outpath'])
